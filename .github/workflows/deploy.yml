name: 🎯 Teclit CI/CD Process

on:
  push:
    branches:
      - develop
      - staging
      - master
  pull_request:
    branches:
      - develop
      - staging
      - master

jobs:

  # Step 1: Build the Angular Application
  build:
    name: ⚙️ Build Angular App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js (v20)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Build Angular Project (Production)
        run: npm run build --configuration=production

  # Step 2: Linting & Unit Tests
  test:
    name: ✅ Run Tests
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js (v20)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Run Lint
        run: npm run lint

      - name: Run Unit Tests
        run: npm run test -- --browsers=ChromeHeadless --watch=false --code-coverage

  # Step 3: Build & Push Docker Image
  docker-build-push:
    name: 🐳 Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    env:
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/teclit-angular-app

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Image Tag Based on Branch
        id: set-tag
        run: |
          case "${GITHUB_REF#refs/heads/}" in
            develop) echo "TAG=dev" >> $GITHUB_ENV ;;
            staging) echo "TAG=staging" >> $GITHUB_ENV ;;
            master) echo "TAG=prod" >> $GITHUB_ENV ;;
            *) echo "Unknown branch. Skipping deployment." && exit 1 ;;
          esac

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.TAG }}
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

  # Step 4: Deploy to SSH Server
  deploy:
    name: 🚀 Deploy to Server
    needs: docker-build-push
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/teclit-angular-app

    steps:
      - name: Set Deployment Host and Tag Based on Branch
        run: |
          case "${GITHUB_REF#refs/heads/}" in
            develop)
              echo "DEPLOY_HOST=${{ secrets.DEV_SERVER_HOST }}" >> $GITHUB_ENV
              echo "TAG=dev" >> $GITHUB_ENV
              ;;
            staging)
              echo "DEPLOY_HOST=${{ secrets.STAGING_SERVER_HOST }}" >> $GITHUB_ENV
              echo "TAG=staging" >> $GITHUB_ENV
              ;;
            master)
              echo "DEPLOY_HOST=${{ secrets.PROD_SERVER_HOST }}" >> $GITHUB_ENV
              echo "TAG=prod" >> $GITHUB_ENV
              ;;
            *)
              echo "Unknown branch. Skipping deployment." && exit 1
              ;;
          esac

      - name: Debug Deployment Info
        run: |
          echo "Deploying to: ${{ env.DEPLOY_HOST }}"
          echo "Using Image: ${{ env.IMAGE_NAME }}:${{ env.TAG }}"

      - name: Deploy Application via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "🔹 Pulling latest Docker image..."
            docker pull ${{ env.IMAGE_NAME }}:${{ env.TAG }}

            echo "🔹 Stopping and removing old container if it exists..."
            if docker ps -a --format '{{.Names}}' | grep -q teclit-app-${{ env.TAG }}; then
              docker stop teclit-app-${{ env.TAG }}
              docker rm teclit-app-${{ env.TAG }}
            fi

            echo "🔹 Running new container..."
            docker run -d --name teclit-app-${{ env.TAG }} -p 8080:80 ${{ env.IMAGE_NAME }}:${{ env.TAG }}

            echo "✅ Deployment complete!"
